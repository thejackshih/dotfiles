#+TITLE: emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./emacs/init.el :mkdirp yes

* basic configuration

** basic environment

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'uackage)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** UI

*** Emacs

#+begin_src emacs-lisp

  (blink-cursor-mode 0)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode(lambda () (display-line-numbers-mode 0))))

#+end_src

*** maximize on startup

#+begin_src emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

*** temp file and lock file

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

#+end_src

*** font, line number

#+begin_src emacs-lisp

  (set-face-attribute 'default nil
		    :family "Andale Mono"
		    :height 140
		    :weight 'normal
		    :width 'normal)

#+end_src

* EFS

#+begin_src emacs-lisp

    (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (rune/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")))


#+end_src

* Magit

#+begin_src emacs-lisp

  (setq auth-sources '("~/.authinfo"))
  (use-package magit)

  (use-package forge
    :after magit)

#+end_src

* Org mode

#+begin_src emacs-lisp 
    (defun efs/org-mode-setup()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode1))

    (use-package org
      :config
      (setq org-ellipsis " â¬‡"
	    org-hide-emphasis-markers t))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode))
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** auto-tangle

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
			(expand-file-name "./emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  
#+end_src

 
