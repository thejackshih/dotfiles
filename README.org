#+TITLE: environment
#+STARTUP: content

* SYSTEM
** NIX FLAKE
#+begin_src nix
  {
    description = "A very basic flake";

    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
      home-manager.url = "github:nix-community/home-manager";
      home-manager.inputs.nixpkgs.follows = "nixpkgs";
      darwin.url = "github:lnl7/nix-darwin";
      darwin.inputs.nixpkgs.follows = "nixpkgs";
      emacs-overlay.url = "github:nix-community/emacs-overlay";
    };

    outputs = { self, nixpkgs, home-manager, darwin, emacs-overlay }:
      let
	overlays = [emacs-overlay.overlay];
      in {
	darwinConfigurations."Jacks-MacBook-Pro" = darwin.lib.darwinSystem {
	  system = "aarch64-darwin";
	  modules = [
	    home-manager.darwinModules.home-manager
	    {
	      nixpkgs.overlays = overlays;
	    }
	    ./hosts/Jacks-MBP/default.nix
	  ];
	};
      };
  }
#+end_src
** DARWIN
#+begin_src nix
  { pkgs, ...}:
  {
    services.nix-daemon.enable = true;
    nix = {
      package = pkgs.nixFlakes;
      extraOptions = ''
	experimental-features = nix-command flakes
      '';
    };

    programs.zsh.enable = true;

    home-manager.useGlobalPkgs = true;
    home-manager.useUserPackages = true;

    users.users.jack = {
      name = "jack";
      home = "/Users/jack";
    };

    home-manager.users.jack = {pkgs, ...}: {
      home.stateVersion = "23.11";
      home.packages = with pkgs; [
	coreutils
	emacs-unstable-pgtk
      ];
      home.file = {
	# vim = {
	#   source = ../../vim/vimrc;
	#   target = ".vimrc";
	#   enable = true;
	# };
	# neovim = {
	#   source = ../../nvim/init.vim;
	#   target = ".config/nvim/init.vim";
	#   enable = true;
	# };
	emacs = {
	  source = ../../emacs/new_init.el;
	  target = ".emacs.d/init.el";
	  enable = false;
	};
      };
      # programs = {
      #   zsh.enable = true;
      #   direnv = {
      #     enable = true;
      #     enableZshIntegration = true;
      #     nix-direnv.enable = true;
      #   };
      # };
    };

    # fonts = {
    #   fontDir.enable = true;
    #   fonts = with pkgs; [];
    # };

    networking.hostName = "Jacks-MacBook-Pro";

    system = {
      defaults = {
	NSGlobalDomain = {
	  _HIHideMenuBar = false;
	  AppleFontSmoothing = 0;
	  KeyRepeat = 2;
	  InitialKeyRepeat = 15;
	  ApplePressAndHoldEnabled = false;
	};
	dock = {
	  autohide = true;
	};
      };
      keyboard = {
	enableKeyMapping = true;
	remapCapsLockToControl = true;
      };
    };


    homebrew = {
      enable = true;
      onActivation.autoUpdate = true;
      onActivation.cleanup = "uninstall";

      brews = [
	# "fvm"
	# "cocoapods"
	# "dart"
      ];
      casks = [
	"1password"
	"adobe-digital-editions"
	"betterdisplay"
	"calibre"
	"raycast"
	"font-fira-code"
      ];
      taps = [
	# "dart-lang/dart"
	# "leoafarias/fvm"
	"homebrew/bundle"
	"homebrew/cask-fonts"
	"homebrew/services"
      ];
    };
  }
#+end_src
* EMACS
** BASE SETUP
*** Package setup
#+begin_src emacs-lisp :tangle ./ext/init.el
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (setq use-package-always-ensure t)
#+end_src
*** encoding setup
#+begin_src emacs-lisp :tangle ./ext/init.el
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
*** Minimal visual setup
#+begin_src emacs-lisp :tangle ./ext/init.el
  (blink-cursor-mode 0)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (setq native-comp-async-report-warnings-errors nil)
#+end_src
*** custom file
#+begin_src emacs-lisp :tangle ./ext/init.el
  (defvar --custom-el (concat user-emacs-directory "custom.el"))
  (if (not (file-exists-p --custom-el))
      (make-empty-file --custom-el))
  (setq custom-file --custom-el)
  (load --custom-el)
#+end_src
*** backup directory
#+begin_src emacs-lisp :tangle ./ext/init.el
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `((".*" . ,--backup-directory)))
#+end_src
*** font setup
#+begin_src emacs-lisp :tangle ./ext/init.el
  (set-face-attribute 'default nil
		      :family "fira code"
		      :height 120
		      :weight 'normal
		      :width 'normal)
#+end_src
** package setup
*** macOS shell environment
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package exec-path-from-shell
    :ensure t
    :config
    (dolist (var '("LC_CTYPE" "NIX_PROFILES" "NIX_SSL_CERT_FILE"))
      (add-to-list 'exec-path-from-shell-variables var))
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
*** ligature
#+begin_src emacs-lisp :tangle ./ext/init.el
  ;; This assumes you've installed the package via MELPA.
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
					 "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
*** programming mode
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src
*** envrc
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package envrc
    :ensure t
    :config
    (envrc-global-mode))
#+end_src
*** magit
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package magit
    :ensure t)
#+end_src
*** org mode
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package org
    :ensure t)
#+end_src
*** theme
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package nord-theme
    :ensure t
    :config
    (load-theme 'nord t))
#+end_src

*** marginalia
#+begin_src emacs-lisp :tangle ./ext/init.el
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

*** vertico
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
  )
#+end_src

*** orderless
#+begin_src emacs-lisp :tangle ./ext/init.el
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** corfu
#+begin_src emacs-lisp :tangle ./ext/init.el
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
#+end_src
