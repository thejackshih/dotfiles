#+TITLE: environment

* SYSTEM
** NIX FLAKE
#+begin_src nix
** DARWIN
#+begin_src nix
  { pkgs, ...}:
{
  services.nix-daemon.enable = true;
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };

  programs.zsh.enable = true;

  home-manager.useGlobalPkgs = true;
  home-manager.useUserPackages = true;

  users.users.jack = {
    name = "jack";
    home = "/Users/jack";
  };

  home-manager.users.jack = {pkgs, ...}: {
    home.stateVersion = "23.11";
    home.packages = with pkgs; [
      coreutils
      emacs-unstable-pgtk
    ];
    home.file = {
      # vim = {
      #   source = ../../vim/vimrc;
      #   target = ".vimrc";
      #   enable = true;
      # };
      # neovim = {
      #   source = ../../nvim/init.vim;
      #   target = ".config/nvim/init.vim";
      #   enable = true;
      # };
      emacs = {
        source = ../../emacs/new_init.el;
        target = ".emacs.d/init.el";
        enable = false;
      };
    };
    # programs = {
    #   zsh.enable = true;
    #   direnv = {
    #     enable = true;
    #     enableZshIntegration = true;
    #     nix-direnv.enable = true;
    #   };
    # };
  };

  # fonts = {
  #   fontDir.enable = true;
  #   fonts = with pkgs; [];
  # };

  networking.hostName = "Jacks-MacBook-Pro";

  system = {
    defaults = {
      NSGlobalDomain = {
        _HIHideMenuBar = false;
        AppleFontSmoothing = 0;
        KeyRepeat = 2;
        InitialKeyRepeat = 15;
        ApplePressAndHoldEnabled = false;
      };
      dock = {
        autohide = true;
      };
    };
    keyboard = {
      enableKeyMapping = true;
      remapCapsLockToControl = true;
    };
  };


  homebrew = {
    enable = true;
    onActivation.autoUpdate = true;
    onActivation.cleanup = "uninstall";

    brews = [
      # "fvm"
      # "cocoapods"
      # "dart"
    ];
    casks = [
      "1password"
      "adobe-digital-editions"
      "betterdisplay"
      "calibre"
      "raycast"
      "font-fira-code"
    ];
    taps = [
      # "dart-lang/dart"
      # "leoafarias/fvm"
      "homebrew/bundle"
      "homebrew/cask-fonts"
      "homebrew/services"
    ];
  };
}
#+end_src
* EMACS
** BASE SETUP
*** Package setup
#+begin_src elisp :tangle init.el
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (setq use-package-always-ensure t)
#+end_src
*** encoding setup
#+begin_src elisp
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
*** Minimal visual setup
#+begin_src elisp
  (blink-cursor-mode 0)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
#+end_src
*** custom file
#+begin_src elisp
  (defvar --custom-el (concat user-emacs-directory "custom.el"))
  (if (not (file-exists-p --custom-el))
      (make-empty-file --custom-el))
  (setq custom-file --custom-el)
  (load --custom-el)
#+end_src
*** backup directory
#+begin_src elisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `((".*" . ,--backup-directory)))
#+end_src
*** font setup
#+begin_src elisp
  (set-face-attribute 'default nil
		      :height 120
		      :weight 'normal
		      :width 'normal)
#+end_src
** package setup
*** macOS shell environment
#+begin_src elisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (dolist (var '("LC_CTYPE" "NIX_PROFILES" "NIX_SSL_CERT_FILE"))
      (add-to-list 'exec-path-from-shell-variables var))
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
*** ligature
#+begin_src elisp
  ;; This assumes you've installed the package via MELPA.
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
					 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
					 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
					 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
					 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
					 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
					 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
					 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
					 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
					 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
					 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
					 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
					 "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
*** programming mode
#+begin_src elisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src
*** envrc
#+begin_src elisp
  (use-package envrc
    :ensure t
    :config
    (envrc-global-mode))
#+end_src
*** magit
#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src
*** org mode
#+begin_src elisp
  (use-package org
    :ensure t)
#+end_src
